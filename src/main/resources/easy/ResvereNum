> &emsp;LeetCode菜鸟渡劫系列，从简单的开始，让开始变得简单。

### 整数反转
&emsp;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

示例 1:
> 输入: 123 
> 输出: 321

示例 2:
> 输入: -123 
> 输出: -321

示例 3:
> 输入: 120 
> 输出: 21

注意:
&emsp;假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

### 题解
#### 低配版
> &emsp;这道题的关键点就是整数反转+防止溢出，那么整数反转有个最简单的方式就是借助字符串去实现反转(如果输入数字为负数那么需要考虑反转后将“-”移动)，反转后转为Long类型防止int的溢出风险，然后再判断反转后的数字是否在整数范围内即可。下面来看下代码实现：

```java
	public static int reverse(int x){
        //将输入参数转为StringBuffer，因为其直接有字符串反转的方法，这里也可以不使用stringbuffer来实现
        StringBuffer stringBuffer = new StringBuffer(String.valueOf(x));
        String num = stringBuffer.reverse().toString();
        //x如果为负数的话需要将“-”特殊处理下，放到字符串最前面
        if (x < 0) {
            num = "-" + num.replace("-","");
        }
        Long result = Long.valueOf(num);
        //溢出判断，是否在int范围内
        if(result < Integer.MIN_VALUE || result > Integer.MAX_VALUE) {
            return 0;
        }
     	//最后转为int返回结果
        return Integer.valueOf(result.toString());
    }
```

#### 高配版

> &emsp;上面那种方式是可以完成这道题目，而且思路也很容易想出来，只是性能会比较差，而且这样的实现也不太优雅。下面换一种方法来实现，就是运用一些运算方式，弹出与推入数字完成数字的反转，看下代码实现，很容易理解。

```java
	public static int reverse(int x){
		//反转后的数，防止溢出所以用long类型来表示
        long num = 0;
        while (x != 0){
        	//将x的末尾数字取出
            int pop = x % 10;
            //把x缩小10倍，用于取下一个末尾数
            x /= 10;
            //把pop依次添加到num中，
            num = num * 10 + pop;
        }
        //校验数字是否在int范围内
        if (num > Integer.MAX_VALUE || num < Integer.MIN_VALUE) {
            return 0;
        }
        return (int)num;
    }
```

#### 高配版

> &emsp;这种方式是比较官方的解决方式，其实是和第二种方法思路是一致的，只不过他是在数字弹出和推入的过程中进行溢出的校验，这种方式比第二种方式会更优一些。

```java
	//与第二种方式类似，只不过溢出检查放在了while内，在循环内的溢出检查还需考虑临界值的情况
    public int reverse(int x) {
        int num = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (num > Integer.MAX_VALUE/10 || (num == Integer.MAX_VALUE / 10 && pop > 7)) {
                return 0;
            }
            if (num < Integer.MIN_VALUE/10 || (num == Integer.MIN_VALUE / 10 && pop < -8)) {
                return 0;
            }
            num = num * 10 + pop;
        }
        return num;
    }
```

> 暂时只写了这三种方式，不知道大家还有没有更好的解决方案
